extends ./layout.pug

block title
  title OAuth2OrizeRecipes
  link(rel='stylesheet', type='text/css', href='../stylesheets/index-modules.css')

block scripts
  script(type='text/javascript', src='../javascripts/jquery.min.js')
  script(type='text/javascript').
    $(document).ready(function () {
      var http = location.protocol;
      var slashes = http.concat("//");
      var port = location.port ? ':' + location.port : '';
      var host = slashes.concat(window.location.hostname) + port;
      var fragment = window.location.hash;
      //replace the host name from the URL and replace all the links we have with the host name as well.
      $(".hostname").text(host);
      $("#authcode").attr("href", "/dialog/authorize?redirect_uri=" + host + "&response_type=code&client_id=abc123&scope=offline_access");
      $("#implicit").attr("href", "/dialog/authorize?redirect_uri=" + host + "&response_type=token&client_id=abc123");
      if (!fragment) {
        //They did not come from the implicit work flow, so show the main work flow of the page.
        $("#main").show();
      } else {
        //If we have a fragment then they must have come from the URL during an implicit call.  So show the
        //implicit work flow.
        $("#implicitDiv").show();
        $("#accessTokenResult").text(fragment.substring(fragment.indexOf("access_token="), fragment.indexOf("&")));
        $("#expirationResult").text(fragment.substring(fragment.indexOf("expires_in="), fragment.indexOf("&token_type=")));
        $("#tokenTypeResult").text(fragment.substring(fragment.indexOf("token_type=")));
        $(".access_token").text(fragment.substring((fragment.indexOf("access_token=") + "access_token".length + 1), fragment.indexOf("&")));
      }
      $("#apiEndPointButton").click(function (event) {
        //They clicked on the api end point button, so hide the implicit work flow and
        //make the ajax call to get the user information using the fragment from the URL
        $.ajax({
          type: 'GET',
          dataType: 'json',
          url: '/api/userinfo',
          headers: {
            "Authorization": "Bearer " + fragment.substring(14, fragment.indexOf("&"))
          },
          success: function (result) {
            $("#implicitDiv").hide();
            $("#userInformation").show();
            $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
          }
        });
      });
      $("#resourceOwnerSubmitPostButton").click(function (event) {
        //They clicked on the Submit Post button underneath the resource owner section
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: "/oauth/token",
          headers: {
            //This is abc123:ssh-secret base 64 encoded
            "Authorization": "Basic YWJjMTIzOnNzaC1zZWNyZXQ="
          },
          data: 'grant_type=password&username=bob&password=secret&scope=offline_access',
          success: function (result) {
            //Hide the main screen because we were successful, add the access token info, and
            //show the resource owner token section
            $("#main").hide();
            $(".access_token").text(result.access_token);
            $("#accessToken").show();
            $("#fullResult").append(JSON.stringify(result, undefined, 4));
            $("#accessTokenCallApiButton").click(function (event) {
              //They clicked on the resource owner token api call
              $.ajax({
                type: 'GET',
                dataType: 'json',
                url: '/api/userinfo',
                headers: {
                  "Authorization": "Bearer " + result.access_token
                },
                success: function (result) {
                  $("#accessToken").hide();
                  $("#userInformation").show();
                  $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
                }
              });
            });
          }
        });
      });
      $("#clientSubmitPostButton").click(function (event) {
        //They clicked on the Submit Post button underneath the client section
        $.ajax({
          type: 'POST',
          dataType: 'json',
          url: "/oauth/token",
          headers: {
            //This is abc123:ssh-secret base 64 encoded
            "Authorization": "Basic YWJjMTIzOnNzaC1zZWNyZXQ="
          },
          data: 'grant_type=client_credentials',
          success: function (result) {
            $("#main").hide();
            $(".access_token").text(result.access_token);
            $("#accessToken").show();
            $("#fullResult").append(JSON.stringify(result, undefined, 4));
            $("#accessTokenCallApiButton").click(function (event) {
              $.ajax({
                type: 'GET',
                dataType: 'json',
                url: '/api/userinfo',
                headers: {
                  "Authorization": "Bearer " + result.access_token
                },
                success: function (result) {
                  $("#accessToken").hide();
                  $("#userInformation").show();
                  $("#userJsonInfo").text(JSON.stringify(result, undefined, 4));
                }
              });
            });
          }
        });
      });
    });


block body
  #main(style='display: none;')
    h1 OAuth2orizeRecipes Server
    p
      | Welcome to OAuth 2.0. Try one of the grant types below. For more information, see the
      a(href='https://github.com/FrankHassanabad/Oauth2orizeRecipes/wiki') wiki site
      | .
      br
    h2
      a(href='http://tools.ietf.org/html/rfc6749#section-4.1') Authorization Code
      br
    |  The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients. Click the link below to begin the grant type.
    a#authcode(href='')
      pre.
        \n            /dialog/authorize?
          redirect_uri=          &
          response_type=code&
          client_id=abc123&
          scope=offline_access

    p
    h2
      a(href='http://tools.ietf.org/html/rfc6749#section-4.2') Implicit
      br
    |  The implicit grant type is used to obtain access tokens (it does not support the issuance of refresh tokens) and is optimized for public clients known to operate a particular redirection URI. Click the link below to begin the grant type.
    a#implicit(href='')
      pre.
        \n            /dialog/authorize?
          redirect_uri=          &
          response_type=token&
          client_id=abc123

    #resourceOwner
      p
      h2
        a(href='http://tools.ietf.org/html/rfc6749#section-4.3') Resource Owner Password Credentials
        br
      |  The resource owner password credentials grant type is suitable in cases where the resource owner has a trust relationship with the client, such as the device operating system or a highly privileged application. Open your browser&apos;s debug tools, and click the Submit Post button below to begin the grant type.
      pre.
        \n  POST oauth/token HTTP/1.1
          Host:
          Content-Type: application/x-www-form-urlencoded
          Authorization: Basic YWJjMTIzOnNzaC1zZWNyZXQ=

          grant_type=password&
          username=bob&
          password=secret&
          scope=offline_access

      p
        button#resourceOwnerSubmitPostButton.pure-button.pure-button-primary(type='button') Submit Post
    br
    #clientCredentials
      p
      h2
        a(href='http://tools.ietf.org/html/rfc6749#section-4.4') Client Credentials
        br
      |  The client can request an access token using only its client credentials (or other supported means of authentication) when the client is requesting access to the protected resources under its control, or those of another resource owner that have been previously arranged with the authorization server. Open your browser&apos;s debug tools, and click the Submit Post button below to begin the grant type.
      pre.
        \n  POST oauth/token HTTP/1.1
          Host:
          Content-Type: application/x-www-form-urlencoded
          Authorization: Basic YWJjMTIzOnNzaC1zZWNyZXQ=

          grant_type=client_credentials

      p
        button#clientSubmitPostButton.pure-button.pure-button-primary(type='button') Submit Post
  #implicitDiv(style='display: none;')
    h1  Access Token
    p
      | In your URL you will see the following access_token fragment which has your your access token, expiration, and token type
    pre.
      \n



    p
      | You can use your access token to call an endpoint such as a user info endpoint. To do this, set the Authorization Bearer to have your access token. Open your browser&apos;s debug tools, press the Call API EndPoint button and look at your network tab.
    pre.
      \nGET /api/userinfo HTTP/1.1
      Host:
      Authorization: Bearer

    button#apiEndPointButton.pure-button.pure-button-primary(type='button') Call API EndPoint
  #userInformation(style='display: none;')
    h1  User Information
    p
      | Underneath your brower&apos;s network tab you will see the following JSON response from a successful API endpoint call.
    pre.

  #accessToken(style='display: none;')
    h1  Access Token
    p
      | Underneath your browser&apos;s network tab you will see the following response with your access token, refresh token, expiration time, and token type
    pre.

    p
      | You can use your access token to call an endpoint such as a user info endpoint. To do this, set the Authorization Bearer to have your access token. Press the Call API EndPoint button and look at your network tab.
    pre.
      \nGET /api/userinfo HTTP/1.1
      Host:
      Authorization: Bearer

    button#accessTokenCallApiButton.pure-button.pure-button-primary(type='button') Call API EndPoint
